function Block.new 2
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop static 0
push constant 14
pop static 1
push argument 1
pop this 0
push argument 2
pop this 1
push constant 4
call Array.new 1
pop this 2
push constant 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push this 2
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Block.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
call Block.drawCore 1
pop temp 0
push constant 0
return
function Block.clear 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
call Block.drawCore 1
pop temp 0
push constant 0
return
function Block.drawCore 0
push argument 0
pop pointer 0
push static 0
call Board.x1 1
push this 0
push static 1
call Math.multiply 2
add
push static 0
call Board.y1 1
push this 1
push static 1
call Math.multiply 2
add
push static 0
call Board.x1 1
push this 0
push constant 4
add
push static 1
call Math.multiply 2
add
push static 0
call Board.y1 1
push this 1
push constant 1
add
push static 1
call Math.multiply 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Block.moveDown 0
push argument 0
pop pointer 0
push this 1
push constant 1
add
pop this 1
push pointer 0
call Block.isCollideBoard 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
push constant 1
sub
pop this 1
label IF_FALSE0
push constant 0
return
function Block.moveLeft 0
push argument 0
pop pointer 0
push this 0
push constant 1
sub
pop this 0
push pointer 0
call Block.isCollideBoard 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push constant 1
add
pop this 0
label IF_FALSE0
push constant 0
return
function Block.moveRight 0
push argument 0
pop pointer 0
push this 0
push constant 1
add
pop this 0
push pointer 0
call Block.isCollideBoard 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 0
push constant 1
sub
pop this 0
label IF_FALSE0
push constant 0
return
function Block.canFall 1
push argument 0
pop pointer 0
push this 1
push constant 1
add
pop this 1
push pointer 0
call Block.isCollideBoard 1
pop local 0
push this 1
push constant 1
sub
pop this 1
push local 0
not
return
function Block.isCollideBoard 4
push argument 0
pop pointer 0
push this 0
push constant 0
lt
push this 0
push constant 5
gt
or
push this 1
push constant 8
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push this 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push static 0
call Board.cells 1
pop local 0
push this 1
push local 0
add
pop pointer 1
push that 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push constant 4
lt
not
if-goto WHILE_END0
push constant 0
pop local 3
push this 0
push local 2
add
push local 1
add
pop pointer 1
push that 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
not
return
label IF_FALSE2
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Block.x 0
push argument 0
pop pointer 0
push this 0
return
function Block.y 0
push argument 0
pop pointer 0
push this 1
return
